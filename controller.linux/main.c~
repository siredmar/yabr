#include "SDL/SDL.h"
#define CHECK_BIT(var, pos) ((var) & (pos))
#define GET_BIT(var, pos) (((var) >> (pos)) & 0x01u)
#define SET_BIT(var, pos) ((var) |= (1 << (pos)))
#define CLEAR_BIT(var, pos) ((var) &= ~(1 << (pos)))
#define TOGGLE_BIT(var, pos) ((var) ^= (1 << (pos)))
#define CLEAR_BITMASK(var, mask) ((var) &= ~(mask))
#define SET_BITMASK(var, mask) ((var) = (var) | (mask))
#define CHECK_BITMASK(var, mask) ((var) & (mask) == (mask))

unsigned char UartOutput = 0;

    /* Function Prototypes */
void PrintKeyInfo (SDL_KeyboardEvent * key);
void PrintModifiers (SDLMod mod);

    /* main */
int
main (int argc, char *argv[])
{

  SDL_Event event;
  int quit = 0;

  /* Initialise SDL */
  if (SDL_Init (SDL_INIT_VIDEO) < 0)
    {
      fprintf (stderr, "Could not initialise SDL: %s\n", SDL_GetError ());
      exit (-1);
    }

  /* Set a video mode */
  if (!SDL_SetVideoMode (320, 200, 0, 0))
    {
      fprintf (stderr, "Could not set video mode: %s\n", SDL_GetError ());
      SDL_Quit ();
      exit (-1);
    }

  /* Enable Unicode translation */
  SDL_EnableUNICODE (1);

  /* Loop until an SDL_QUIT event is found */
  while (!quit)
    {

while( SDL_PollEvent( &event ) ){
        switch( event.type ){
            /* Look for a keypress */
            case SDL_KEYDOWN:
                /* Check the SDLKey values and move change the coords */
                switch( event.key.keysym.sym ){
                    case SDLK_LEFT:
                        SET_BIT(UartOutput, 1); 
                        break;
                    case SDLK_RIGHT:
                        SET_BIT(UartOutput, 0); 
                        break;
                    case SDLK_UP:
                        SET_BIT(UartOutput, 2); 
                        break;
                    case SDLK_DOWN:
                        SET_BIT(UartOutput, 3); 
                        break;
                    default:
                        break;
                }
                break;
            /* We must also use the SDL_KEYUP events to zero the x */
            /* and y velocity variables. But we must also be       */
            /* careful not to zero the velocities when we shouldn't*/
            case SDL_KEYUP:
                switch( event.key.keysym.sym ){
                    case SDLK_LEFT:
                        CLEAR_BIT(UartOutput, 1); 
                        break;
                    case SDLK_RIGHT:
                        CLEAR_BIT(UartOutput, 0); 
                        break;
                    case SDLK_UP:
                        CLEAR_BIT(UartOutput, 2); 
                        break;
                    case SDLK_DOWN:
                        CLEAR_BIT(UartOutput, 3); 
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }
    }

  /* Clean up */
  SDL_Quit ();
  exit (0);
}

    /* Print all information about a key event */
void
PrintKeyInfo (SDL_KeyboardEvent * key)
{
  /* Is it a release or a press? */
  if (key->type == SDL_KEYUP)
    printf ("Release:- ");
  else
    printf ("Press:- ");

  /* Print the hardware scancode first */
  printf ("Scancode: 0x%02X", key->keysym.scancode);
  /* Print the name of the key */
  printf (", Name: %s", SDL_GetKeyName (key->keysym.sym));
  /* We want to print the unicode info, but we need to make */
  /* sure its a press event first (remember, release events */
  /* don't have unicode info                                */
  if (key->type == SDL_KEYDOWN)
    {
      /* If the Unicode value is less than 0x80 then the    */
      /* unicode value can be used to get a printable       */
      /* representation of the key, using (char)unicode.    */
      printf (", Unicode: ");
      if (key->keysym.unicode < 0x80 && key->keysym.unicode > 0)
	{
	  printf ("%c (0x%04X)", (char) key->keysym.unicode,
		  key->keysym.unicode);
	}
      else
	{
	  printf ("? (0x%04X)", key->keysym.unicode);
	}
    }
  printf ("\n");
  /* Print modifier info */
  PrintModifiers (key->keysym.mod);
}

    /* Print modifier info */
void
PrintModifiers (SDLMod mod)
{
  printf ("Modifers: ");

  /* If there are none then say so and return */
  if (mod == KMOD_NONE)
    {
      printf ("None\n");
      return;
    }

  /* Check for the presence of each SDLMod value */
  /* This looks messy, but there really isn't    */
  /* a clearer way.                              */
  if (mod & KMOD_NUM)
    printf ("NUMLOCK ");
  if (mod & KMOD_CAPS)
    printf ("CAPSLOCK ");
  if (mod & KMOD_LCTRL)
    printf ("LCTRL ");
  if (mod & KMOD_RCTRL)
    printf ("RCTRL ");
  if (mod & KMOD_RSHIFT)
    printf ("RSHIFT ");
  if (mod & KMOD_LSHIFT)
    printf ("LSHIFT ");
  if (mod & KMOD_RALT)
    printf ("RALT ");
  if (mod & KMOD_LALT)
    printf ("LALT ");
  if (mod & KMOD_CTRL)
    printf ("CTRL ");
  if (mod & KMOD_SHIFT)
    printf ("SHIFT ");
  if (mod & KMOD_ALT)
    printf ("ALT ");
  printf ("\n");
}
